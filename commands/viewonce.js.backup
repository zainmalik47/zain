const { downloadContentFromMessage } = require('@whiskeysockets/baileys');

const channelInfo = {
    contextInfo: {
        forwardingScore: 1,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
            newsletterJid: '0029Vb6GUj8BPzjOWNfnhm1B@newsletter',
            newsletterName: 'MAZARI TECH',
            serverMessageId: -1
        }
    }
};

async function viewonceCommand(sock, chatId, message) {
    try {
        // Extract quoted message
        const quoted = message.message?.extendedTextMessage?.contextInfo?.quotedMessage;
        if (!quoted) {
            await sock.sendMessage(chatId, { 
                text: '❌ Please reply to a view-once media message.\n\nUsage: Reply to any view-once image/video with .vv', 
                ...channelInfo 
            }, { quoted: message });
            return;
        }

        // Check for view-once media
        const quotedImage = quoted?.imageMessage;
        const quotedVideo = quoted?.videoMessage;

        if (quotedImage?.viewOnce || quotedVideo?.viewOnce) {
            // Send processing message
            await sock.sendMessage(chatId, { 
                text: '⏳ Processing view-once media...', 
                ...channelInfo 
            }, { quoted: message });

            try {
                if (quotedImage?.viewOnce) {
                    // Handle view-once image
                    const stream = await downloadContentFromMessage(quotedImage, 'image');
                    let buffer = Buffer.from([]);
                    for await (const chunk of stream) {
                        buffer = Buffer.concat([buffer, chunk]);
                    }

                    await sock.sendMessage(chatId, { 
                        image: buffer,
                        caption: quotedImage.caption || '✅ View-once image',
                        ...channelInfo
                    }, { quoted: message });

                } else if (quotedVideo?.viewOnce) {
                    // Handle view-once video
                    const stream = await downloadContentFromMessage(quotedVideo, 'video');
                    let buffer = Buffer.from([]);
                    for await (const chunk of stream) {
                        buffer = Buffer.concat([buffer, chunk]);
                    }

                    await sock.sendMessage(chatId, { 
                        video: buffer,
                        caption: quotedVideo.caption || '✅ View-once video',
                        ...channelInfo
                    }, { quoted: message });
                }
            } catch (mediaError) {
                console.error('Media processing error:', mediaError);
                await sock.sendMessage(chatId, { 
                    text: '❌ Failed to process media. It may be expired or unavailable.',
                    ...channelInfo
                }, { quoted: message });
            }
        } else {
            await sock.sendMessage(chatId, { 
                text: '❌ This is not a view-once media message.\n\nPlease reply to a view-once image/video.',
                ...channelInfo
            }, { quoted: message });
        }
    } catch (error) {
        console.error('ViewOnce command error:', error);
        await sock.sendMessage(chatId, { 
            text: '❌ An error occurred while processing the view-once media.',
            ...channelInfo
        }, { quoted: message });
    }
}

module.exports = viewonceCommand; 